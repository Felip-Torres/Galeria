/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.pruebagaleria;

import java.awt.Image;
import java.io.File;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;

/**
 *
 * @author alber
 */
public class PruebaGaleria extends javax.swing.JPanel {

    ArrayList<String> imgPaths;
    int index = 0;
    
    public PruebaGaleria() {
        initComponents();
    }
    
    // VALIDACION FORMATO IMAGENES
    public static boolean imagenValida(String archivo) {
        String extension = compruebaExtension(archivo);
        if (extension != null && extension.equalsIgnoreCase("jpg") || extension.equalsIgnoreCase("png") || extension.equalsIgnoreCase("jpeg")) return true;
        else return false;
    }
    public static String compruebaExtension(String archivo) {
        int dotIndex = archivo.lastIndexOf(".");
        if (dotIndex > 0 && dotIndex < archivo.length()-1) {
            return archivo.substring(dotIndex+1).toLowerCase();
        }
        return null;
    }
    
    public void showImage(String img) {
        Image imagen = new ImageIcon(img).getImage();
        ImageIcon imgIcon = new ImageIcon(imagen.getScaledInstance(imgBase.getWidth(), imgBase.getHeight(), Image.SCALE_SMOOTH));
        imgBase.setIcon(imgIcon);
    }

    
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        imgBase = new javax.swing.JLabel();
        imagenPrevia = new javax.swing.JButton();
        imagenSiguiente = new javax.swing.JButton();
        cargarImagenes = new javax.swing.JButton();

        imagenPrevia.setText("<");
        imagenPrevia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imagenPreviaActionPerformed(evt);
            }
        });

        imagenSiguiente.setText(">");
        imagenSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imagenSiguienteActionPerformed(evt);
            }
        });

        cargarImagenes.setText("CargarImagenes");
        cargarImagenes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarImagenesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(imgBase, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(imagenPrevia)
                        .addGap(267, 267, 267)
                        .addComponent(cargarImagenes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 293, Short.MAX_VALUE)
                        .addComponent(imagenSiguiente)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imgBase, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(imagenPrevia)
                    .addComponent(imagenSiguiente)
                    .addComponent(cargarImagenes))
                .addGap(0, 8, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void imagenPreviaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imagenPreviaActionPerformed
        if (index > 0) {
            index--;
            String name = imgPaths.get(index);
            showImage(name);
        }
    }//GEN-LAST:event_imagenPreviaActionPerformed

    private void cargarImagenesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarImagenesActionPerformed
         imgPaths = new ArrayList<>();
         String dirCarpeta = "";
         JFileChooser fileChooser = new JFileChooser();
         fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
         int seleccionado = fileChooser.showOpenDialog(this);
         if(seleccionado != JFileChooser.CANCEL_OPTION) {
             File directorio = fileChooser.getSelectedFile();
             dirCarpeta = fileChooser.getSelectedFile().getPath();
             File carpeta = new File(dirCarpeta);
             
             if (carpeta.exists() && carpeta.isDirectory()) {
                 File[] files = carpeta.listFiles();
                 if (files != null) {
                     for (File f : files) {
                         if(f.isFile() && imagenValida(f.getName())) imgPaths.add(f.getAbsolutePath());
                     }
                 }
             }
             String nombre = imgPaths.get(index);
             showImage(nombre);
         }
    }//GEN-LAST:event_cargarImagenesActionPerformed

    private void imagenSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imagenSiguienteActionPerformed
         if (index < imgPaths.size()-1) {
            index++;
            String name = imgPaths.get(index);
            showImage(name);
        }
    }//GEN-LAST:event_imagenSiguienteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cargarImagenes;
    private javax.swing.JButton imagenPrevia;
    private javax.swing.JButton imagenSiguiente;
    private javax.swing.JLabel imgBase;
    // End of variables declaration//GEN-END:variables
}
